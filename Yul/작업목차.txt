<<<<<<< HEAD
[Seoul_bus_stop.ipynb]
D:\Work\2nd_project\Yul\Seoul_bus_stop.ipynb
1. 구별 버스정류장 갯수
	1-1 서울시 구 경계 데이터 확인
	1-2. 데이터 불러오기
	1-3. 버스정류소 데이터를 GeoDataFrame으로 변환
	1-4. 버스정류소와 구 경계 데이터 공간 연산
	1-5. 결과 시각화
	1-6. 결과 저장

2. 동별 버스정류장 갯수
	2-1 서울시 구 경계 데이터 확인
	2-2. 데이터 불러오기
	2-3. 버스정류소 데이터를 GeoDataFrame으로 변환
	2-4. Spatial Join을 통한 동별 할당
	2-5. 결과 시각화
	2-6. 결과 저장

[Seoul_Parks_by_District.ipynb]
D:\Work\2nd_project\Yul\Seoul_Parks_by_District.ipynb
1. 구별 공원 갯수
	1-1. 
	1-2. 
	1-3. 
	1-4. 
	1-5. 
	1-6. 

2. 동별 공원 갯수
	2-1. 
	2-2. 
	2-3. 
	2-4. 
	2-5. 
	2-6. 
=======
[DP_Seoul_bus_stop.ipynb]
1. 구별 버스정류장 갯수
    1-1 서울시 구 경계 데이터 확인
    1-2. 데이터 불러오기
    1-3. 버스정류소 데이터를 GeoDataFrame으로 변환
    1-4. 버스정류소와 구 경계 데이터 공간 연산
    1-5. 결과 시각화
    1-6. 결과 저장

2. 동별 버스정류장 갯수
    2-1 서울시 구 경계 데이터 확인
    2-2. 데이터 불러오기
    2-3. 버스정류소 데이터를 GeoDataFrame으로 변환
    2-4. Spatial Join을 통한 동별 할당
    2-5. 결과 시각화
    2-6. 결과 저장
    2-7. 실제 행정동에 적용
        2-7-1. 데이터 불러오기
        2-7-2. 동이름 비교하기
        2-7-3. 이상치 처리 (경기도에 속한 동, 중복 동 처리하기)
            2-7-3-1. 서울시 외의 동 정보 확인
            2-7-3-2. 서울시 정보 확인
            2-7-3-3. 중복동 처리
    2-8. 결과 저장

[DP_Seoul_Parks_by_District.ipynb]
1. 행정구별 공원 갯수
    1-1. 파일 불러오기
    1-2. 공원 데이터를 GeoDataFrame으로 변환
    1-3. 공원 데이터 좌표계를 행정구 데이터 좌표계로 변환
    1-4. 공원과 행정구 경계 데이터 결합
    1-5. 행정구별 공원 개수 계산 및 결과 출력
    1-6. 결과 저장

[DP_subway_with_District.ipynb]
1. 데이터 읽기
2. 구 목록 생성
3. 구 추출 함수 정의
4. 구 추출 및 구 정보 사용
5. 데이터 프레임 정리
6. 구 정보가 있는 역만 필터링 (경기도 제외)
7. 구별 지하철역 수 계산
8. 결과 출력
9. 시각화
10. 제외된 역 확인
11. 결과 저장

[DP_subway_gu_dong_matching copy.ipynb]
1. 데이터 준비
     1-1. 필요 라이브러리 불러오기
     1-2. 데이터 파일 불러오기
2. 불러온 데이터 확인
3. 데이터 전처리
     3.1 좌표계 통일 (모두 EPSG:4326으로 변환)
     3.2 지하철역 데이터를 GeoDataFrame으로 변환
4. 공간 분석 작업
     4.1 역과 구 매칭
     4.2 역과 동 매칭
     4.3 최종 데이터프레임 생성
     4.4 서울시 외 지역 제거
     4.5 분석 결과 출력
     4-6. 최종 데이터프레임 가공
     4-7. 최종 데이터프레임 컬럼 순서 변경
5. 서울시 모든 구별 법정동과 매칭
     5-1. 최종 데이터프레임 가공
     5-2. 최종 데이터프레임 컬럼 순서 변경
     5-3. gu_dong_df 전처리
     5-4. 'gu'와 'dong' 조합으로 고유값 세기
     5-5. gu_dong_df와 result_df를 dong을 기준으로 left outer join
     5-6. station_name과 line이 없는 동은 NaN으로 자동 채워짐
     5-7. 'gu'와 'dong' 조합으로 고유값 세기
6. 법정동별 지하철 유무 구분
     6-1. 지하철이 있는 법정동
     6-2. 지하철이 없는 법정동
7. 결과 저장

[DP_bus_gu_dong_matching.ipynb]
1. 데이터 준비
     1-1. 필요 라이브러리 불러오기
     1-2. 데이터 파일 불러오기
2. 불러온 데이터 확인
3. 데이터 전처리
     3-1. 좌표계 통일 (모두 EPSG:4326으로 변환)
     3-2. 버스 정류장 데이터를 GeoDataFrame으로 변환
4. 공간 분석 작업
     4-1. 버스 정류장과 구 매칭
     4-2. 버스 정류장과 동 매칭
     4-3. 최종 데이터프레임 생성
     4-4. 오차 확인
     4-5. 동이 NaN인 행 지우기
     4-6. '서울특별시'와 '구' 이름 분리
     4-7. 특정 열의 모든 공백 제거
     4-8. 구별 법정동 목록과 버스 정류장 데이터 매칭

5. 서울시 모든 구별 법정동과 매칭
     5-1. 최종 데이터프레임 가공
     5-2. 최종 데이터프레임 컬럼 순서 변경
     5-3. gu_dong_df 전처리
     5-4. 'gu'와 'dong' 조합으로 고유값 세기
     5-5. gu_dong_df와 result_df를 dong을 기준으로 left outer join
     5-6. station_name과 line이 없는 동은 NaN으로 자동 채워짐
     5-7. 'gu'와 'dong' 조합으로 고유값 세기
6. 법정동별 지하철 유무 구분
     6-1. 지하철이 있는 법정동
     6-2. 지하철이 없는 법정동
7. 결과 저장
>>>>>>> 2e14f54fafb9258f2b386ddc10f109c3af5d39e2

